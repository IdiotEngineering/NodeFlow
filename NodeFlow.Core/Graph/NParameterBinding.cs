using NodeFlow.Core.Nodes;

namespace NodeFlow.Core.Graph
{
  /// <summary>
  ///   A bound NParameter in an NGraph (a data connection between two NNodes). This is akin to
  ///   and edge in a graph.
  /// </summary>
  public class NParameterBinding
  {
    #region Fields / Properties

    /// <summary>
    ///   The source parameter type this is bound to.
    /// </summary>
    public NParameter SourceParameter;

    /// <summary>
    ///   The target parameter type this is bound to. Probably the same as source.
    /// </summary>
    public NParameter TargetParameter;

    /// <summary>
    ///   The source node that generates the value for this parameter binding.
    /// </summary>
    public NNode SourceNode;

    /// <summary>
    ///   The target node that accepts the value generated by SourceNode for this binding.
    /// </summary>
    public NNode TargetNode;

    /// <summary>
    ///   Rather than set an input NNode, primitive types can be bound to a literal value. This
    ///   is null otherwise.
    /// </summary>
    public string LiteralValue;

    #endregion

    /// <summary>
    ///   Create a node-to-node binding.
    /// </summary>
    public NParameterBinding(NParameter sourceParameter, NParameter targetParameter, NNode sourceNode, NNode targetNode)
    {
      SourceParameter = sourceParameter;
      TargetParameter = targetParameter;
      SourceNode = sourceNode;
      TargetNode = targetNode;
    }

    /// <summary>
    ///   Creates a literal-value binding.
    /// </summary>
    public NParameterBinding(NParameter targetParameter, NNode targetNode, string literalValue)
    {
      TargetParameter = targetParameter;
      TargetNode = targetNode;
      LiteralValue = literalValue;
    }
  }
}